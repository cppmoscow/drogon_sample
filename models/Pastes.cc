/**
 *
 *  Pastes.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Pastes.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::pastebin;

const std::string Pastes::Cols::_id = "id";
const std::string Pastes::Cols::_code = "code";
const std::string Pastes::Cols::_content = "content";
const std::string Pastes::Cols::_token = "token";
const std::string Pastes::primaryKeyName = "id";
const bool Pastes::hasPrimaryKey = true;
const std::string Pastes::tableName = "pastes";

const std::vector<typename Pastes::MetaData> Pastes::metaData_ = {
    {"id", "int32_t", "integer", 4, 1, 1, 1},
    {"code", "std::string", "character varying", 0, 0, 0, 0},
    {"content", "std::string", "character varying", 0, 0, 0, 0},
    {"token", "std::string", "uuid", 0, 0, 0, 0}};
const std::string &Pastes::getColumnName(size_t index) noexcept(false) {
  assert(index < metaData_.size());
  return metaData_[index].colName_;
}
Pastes::Pastes(const Row &r, const ssize_t indexOffset) noexcept {
  if (indexOffset < 0) {
    if (!r["id"].isNull()) {
      id_ = std::make_shared<int32_t>(r["id"].as<int32_t>());
    }
    if (!r["code"].isNull()) {
      code_ = std::make_shared<std::string>(r["code"].as<std::string>());
    }
    if (!r["content"].isNull()) {
      content_ = std::make_shared<std::string>(r["content"].as<std::string>());
    }
    if (!r["token"].isNull()) {
      token_ = std::make_shared<std::string>(r["token"].as<std::string>());
    }
  } else {
    size_t offset = (size_t)indexOffset;
    if (offset + 4 > r.size()) {
      LOG_FATAL << "Invalid SQL result for this model";
      return;
    }
    size_t index;
    index = offset + 0;
    if (!r[index].isNull()) {
      id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
    }
    index = offset + 1;
    if (!r[index].isNull()) {
      code_ = std::make_shared<std::string>(r[index].as<std::string>());
    }
    index = offset + 2;
    if (!r[index].isNull()) {
      content_ = std::make_shared<std::string>(r[index].as<std::string>());
    }
    index = offset + 3;
    if (!r[index].isNull()) {
      token_ = std::make_shared<std::string>(r[index].as<std::string>());
    }
  }
}

Pastes::Pastes(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
  if (pMasqueradingVector.size() != 4) {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if (!pMasqueradingVector[0].empty() &&
      pJson.isMember(pMasqueradingVector[0])) {
    dirtyFlag_[0] = true;
    if (!pJson[pMasqueradingVector[0]].isNull()) {
      id_ = std::make_shared<int32_t>(
          (int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
  }
  if (!pMasqueradingVector[1].empty() &&
      pJson.isMember(pMasqueradingVector[1])) {
    dirtyFlag_[1] = true;
    if (!pJson[pMasqueradingVector[1]].isNull()) {
      code_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[1]].asString());
    }
  }
  if (!pMasqueradingVector[2].empty() &&
      pJson.isMember(pMasqueradingVector[2])) {
    dirtyFlag_[2] = true;
    if (!pJson[pMasqueradingVector[2]].isNull()) {
      content_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[2]].asString());
    }
  }
  if (!pMasqueradingVector[3].empty() &&
      pJson.isMember(pMasqueradingVector[3])) {
    dirtyFlag_[3] = true;
    if (!pJson[pMasqueradingVector[3]].isNull()) {
      token_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[3]].asString());
    }
  }
}

Pastes::Pastes(const Json::Value &pJson) noexcept(false) {
  if (pJson.isMember("id")) {
    dirtyFlag_[0] = true;
    if (!pJson["id"].isNull()) {
      id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
  }
  if (pJson.isMember("code")) {
    dirtyFlag_[1] = true;
    if (!pJson["code"].isNull()) {
      code_ = std::make_shared<std::string>(pJson["code"].asString());
    }
  }
  if (pJson.isMember("content")) {
    dirtyFlag_[2] = true;
    if (!pJson["content"].isNull()) {
      content_ = std::make_shared<std::string>(pJson["content"].asString());
    }
  }
  if (pJson.isMember("token")) {
    dirtyFlag_[3] = true;
    if (!pJson["token"].isNull()) {
      token_ = std::make_shared<std::string>(pJson["token"].asString());
    }
  }
}

void Pastes::updateByMasqueradedJson(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
  if (pMasqueradingVector.size() != 4) {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if (!pMasqueradingVector[0].empty() &&
      pJson.isMember(pMasqueradingVector[0])) {
    if (!pJson[pMasqueradingVector[0]].isNull()) {
      id_ = std::make_shared<int32_t>(
          (int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
  }
  if (!pMasqueradingVector[1].empty() &&
      pJson.isMember(pMasqueradingVector[1])) {
    dirtyFlag_[1] = true;
    if (!pJson[pMasqueradingVector[1]].isNull()) {
      code_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[1]].asString());
    }
  }
  if (!pMasqueradingVector[2].empty() &&
      pJson.isMember(pMasqueradingVector[2])) {
    dirtyFlag_[2] = true;
    if (!pJson[pMasqueradingVector[2]].isNull()) {
      content_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[2]].asString());
    }
  }
  if (!pMasqueradingVector[3].empty() &&
      pJson.isMember(pMasqueradingVector[3])) {
    dirtyFlag_[3] = true;
    if (!pJson[pMasqueradingVector[3]].isNull()) {
      token_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[3]].asString());
    }
  }
}

void Pastes::updateByJson(const Json::Value &pJson) noexcept(false) {
  if (pJson.isMember("id")) {
    if (!pJson["id"].isNull()) {
      id_ = std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
  }
  if (pJson.isMember("code")) {
    dirtyFlag_[1] = true;
    if (!pJson["code"].isNull()) {
      code_ = std::make_shared<std::string>(pJson["code"].asString());
    }
  }
  if (pJson.isMember("content")) {
    dirtyFlag_[2] = true;
    if (!pJson["content"].isNull()) {
      content_ = std::make_shared<std::string>(pJson["content"].asString());
    }
  }
  if (pJson.isMember("token")) {
    dirtyFlag_[3] = true;
    if (!pJson["token"].isNull()) {
      token_ = std::make_shared<std::string>(pJson["token"].asString());
    }
  }
}

const int32_t &Pastes::getValueOfId() const noexcept {
  const static int32_t defaultValue = int32_t();
  if (id_)
    return *id_;
  return defaultValue;
}
const std::shared_ptr<int32_t> &Pastes::getId() const noexcept { return id_; }
void Pastes::setId(const int32_t &pId) noexcept {
  id_ = std::make_shared<int32_t>(pId);
  dirtyFlag_[0] = true;
}
const typename Pastes::PrimaryKeyType &Pastes::getPrimaryKey() const {
  assert(id_);
  return *id_;
}

const std::string &Pastes::getValueOfCode() const noexcept {
  const static std::string defaultValue = std::string();
  if (code_)
    return *code_;
  return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getCode() const noexcept {
  return code_;
}
void Pastes::setCode(const std::string &pCode) noexcept {
  code_ = std::make_shared<std::string>(pCode);
  dirtyFlag_[1] = true;
}
void Pastes::setCode(std::string &&pCode) noexcept {
  code_ = std::make_shared<std::string>(std::move(pCode));
  dirtyFlag_[1] = true;
}
void Pastes::setCodeToNull() noexcept {
  code_.reset();
  dirtyFlag_[1] = true;
}

const std::string &Pastes::getValueOfContent() const noexcept {
  const static std::string defaultValue = std::string();
  if (content_)
    return *content_;
  return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getContent() const noexcept {
  return content_;
}
void Pastes::setContent(const std::string &pContent) noexcept {
  content_ = std::make_shared<std::string>(pContent);
  dirtyFlag_[2] = true;
}
void Pastes::setContent(std::string &&pContent) noexcept {
  content_ = std::make_shared<std::string>(std::move(pContent));
  dirtyFlag_[2] = true;
}
void Pastes::setContentToNull() noexcept {
  content_.reset();
  dirtyFlag_[2] = true;
}

const std::string &Pastes::getValueOfToken() const noexcept {
  const static std::string defaultValue = std::string();
  if (token_)
    return *token_;
  return defaultValue;
}
const std::shared_ptr<std::string> &Pastes::getToken() const noexcept {
  return token_;
}
void Pastes::setToken(const std::string &pToken) noexcept {
  token_ = std::make_shared<std::string>(pToken);
  dirtyFlag_[3] = true;
}
void Pastes::setToken(std::string &&pToken) noexcept {
  token_ = std::make_shared<std::string>(std::move(pToken));
  dirtyFlag_[3] = true;
}
void Pastes::setTokenToNull() noexcept {
  token_.reset();
  dirtyFlag_[3] = true;
}

void Pastes::updateId(const uint64_t id) {}

const std::vector<std::string> &Pastes::insertColumns() noexcept {
  static const std::vector<std::string> inCols = {"code", "content", "token"};
  return inCols;
}

void Pastes::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
  if (dirtyFlag_[1]) {
    if (getCode()) {
      binder << getValueOfCode();
    } else {
      binder << nullptr;
    }
  }
  if (dirtyFlag_[2]) {
    if (getContent()) {
      binder << getValueOfContent();
    } else {
      binder << nullptr;
    }
  }
  if (dirtyFlag_[3]) {
    if (getToken()) {
      binder << getValueOfToken();
    } else {
      binder << nullptr;
    }
  }
}

const std::vector<std::string> Pastes::updateColumns() const {
  std::vector<std::string> ret;
  if (dirtyFlag_[1]) {
    ret.push_back(getColumnName(1));
  }
  if (dirtyFlag_[2]) {
    ret.push_back(getColumnName(2));
  }
  if (dirtyFlag_[3]) {
    ret.push_back(getColumnName(3));
  }
  return ret;
}

void Pastes::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
  if (dirtyFlag_[1]) {
    if (getCode()) {
      binder << getValueOfCode();
    } else {
      binder << nullptr;
    }
  }
  if (dirtyFlag_[2]) {
    if (getContent()) {
      binder << getValueOfContent();
    } else {
      binder << nullptr;
    }
  }
  if (dirtyFlag_[3]) {
    if (getToken()) {
      binder << getValueOfToken();
    } else {
      binder << nullptr;
    }
  }
}
Json::Value Pastes::toJson() const {
  Json::Value ret;
  if (getId()) {
    ret["id"] = getValueOfId();
  } else {
    ret["id"] = Json::Value();
  }
  if (getCode()) {
    ret["code"] = getValueOfCode();
  } else {
    ret["code"] = Json::Value();
  }
  if (getContent()) {
    ret["content"] = getValueOfContent();
  } else {
    ret["content"] = Json::Value();
  }
  if (getToken()) {
    ret["token"] = getValueOfToken();
  } else {
    ret["token"] = Json::Value();
  }
  return ret;
}

Json::Value Pastes::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const {
  Json::Value ret;
  if (pMasqueradingVector.size() == 4) {
    if (!pMasqueradingVector[0].empty()) {
      if (getId()) {
        ret[pMasqueradingVector[0]] = getValueOfId();
      } else {
        ret[pMasqueradingVector[0]] = Json::Value();
      }
    }
    if (!pMasqueradingVector[1].empty()) {
      if (getCode()) {
        ret[pMasqueradingVector[1]] = getValueOfCode();
      } else {
        ret[pMasqueradingVector[1]] = Json::Value();
      }
    }
    if (!pMasqueradingVector[2].empty()) {
      if (getContent()) {
        ret[pMasqueradingVector[2]] = getValueOfContent();
      } else {
        ret[pMasqueradingVector[2]] = Json::Value();
      }
    }
    if (!pMasqueradingVector[3].empty()) {
      if (getToken()) {
        ret[pMasqueradingVector[3]] = getValueOfToken();
      } else {
        ret[pMasqueradingVector[3]] = Json::Value();
      }
    }
    return ret;
  }
  LOG_ERROR << "Masquerade failed";
  if (getId()) {
    ret["id"] = getValueOfId();
  } else {
    ret["id"] = Json::Value();
  }
  if (getCode()) {
    ret["code"] = getValueOfCode();
  } else {
    ret["code"] = Json::Value();
  }
  if (getContent()) {
    ret["content"] = getValueOfContent();
  } else {
    ret["content"] = Json::Value();
  }
  if (getToken()) {
    ret["token"] = getValueOfToken();
  } else {
    ret["token"] = Json::Value();
  }
  return ret;
}

bool Pastes::validateJsonForCreation(const Json::Value &pJson,
                                     std::string &err) {
  if (pJson.isMember("id")) {
    if (!validJsonOfField(0, "id", pJson["id"], err, true))
      return false;
  }
  if (pJson.isMember("code")) {
    if (!validJsonOfField(1, "code", pJson["code"], err, true))
      return false;
  }
  if (pJson.isMember("content")) {
    if (!validJsonOfField(2, "content", pJson["content"], err, true))
      return false;
  }
  if (pJson.isMember("token")) {
    if (!validJsonOfField(3, "token", pJson["token"], err, true))
      return false;
  }
  return true;
}
bool Pastes::validateMasqueradedJsonForCreation(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector, std::string &err) {
  if (pMasqueradingVector.size() != 4) {
    err = "Bad masquerading vector";
    return false;
  }
  try {
    if (!pMasqueradingVector[0].empty()) {
      if (pJson.isMember(pMasqueradingVector[0])) {
        if (!validJsonOfField(0, pMasqueradingVector[0],
                              pJson[pMasqueradingVector[0]], err, true))
          return false;
      }
    }
    if (!pMasqueradingVector[1].empty()) {
      if (pJson.isMember(pMasqueradingVector[1])) {
        if (!validJsonOfField(1, pMasqueradingVector[1],
                              pJson[pMasqueradingVector[1]], err, true))
          return false;
      }
    }
    if (!pMasqueradingVector[2].empty()) {
      if (pJson.isMember(pMasqueradingVector[2])) {
        if (!validJsonOfField(2, pMasqueradingVector[2],
                              pJson[pMasqueradingVector[2]], err, true))
          return false;
      }
    }
    if (!pMasqueradingVector[3].empty()) {
      if (pJson.isMember(pMasqueradingVector[3])) {
        if (!validJsonOfField(3, pMasqueradingVector[3],
                              pJson[pMasqueradingVector[3]], err, true))
          return false;
      }
    }
  } catch (const Json::LogicError &e) {
    err = e.what();
    return false;
  }
  return true;
}
bool Pastes::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
  if (pJson.isMember("id")) {
    if (!validJsonOfField(0, "id", pJson["id"], err, false))
      return false;
  } else {
    err = "The value of primary key must be set in the json object for update";
    return false;
  }
  if (pJson.isMember("code")) {
    if (!validJsonOfField(1, "code", pJson["code"], err, false))
      return false;
  }
  if (pJson.isMember("content")) {
    if (!validJsonOfField(2, "content", pJson["content"], err, false))
      return false;
  }
  if (pJson.isMember("token")) {
    if (!validJsonOfField(3, "token", pJson["token"], err, false))
      return false;
  }
  return true;
}
bool Pastes::validateMasqueradedJsonForUpdate(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector, std::string &err) {
  if (pMasqueradingVector.size() != 4) {
    err = "Bad masquerading vector";
    return false;
  }
  try {
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0])) {
      if (!validJsonOfField(0, pMasqueradingVector[0],
                            pJson[pMasqueradingVector[0]], err, false))
        return false;
    } else {
      err =
          "The value of primary key must be set in the json object for update";
      return false;
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1])) {
      if (!validJsonOfField(1, pMasqueradingVector[1],
                            pJson[pMasqueradingVector[1]], err, false))
        return false;
    }
    if (!pMasqueradingVector[2].empty() &&
        pJson.isMember(pMasqueradingVector[2])) {
      if (!validJsonOfField(2, pMasqueradingVector[2],
                            pJson[pMasqueradingVector[2]], err, false))
        return false;
    }
    if (!pMasqueradingVector[3].empty() &&
        pJson.isMember(pMasqueradingVector[3])) {
      if (!validJsonOfField(3, pMasqueradingVector[3],
                            pJson[pMasqueradingVector[3]], err, false))
        return false;
    }
  } catch (const Json::LogicError &e) {
    err = e.what();
    return false;
  }
  return true;
}
bool Pastes::validJsonOfField(size_t index, const std::string &fieldName,
                              const Json::Value &pJson, std::string &err,
                              bool isForCreation) {
  switch (index) {
  case 0:
    if (pJson.isNull()) {
      err = "The " + fieldName + " column cannot be null";
      return false;
    }
    if (isForCreation) {
      err = "The automatic primary key cannot be set";
      return false;
    }
    if (!pJson.isInt()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    break;
  case 1:
    if (pJson.isNull()) {
      return true;
    }
    if (!pJson.isString()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    break;
  case 2:
    if (pJson.isNull()) {
      return true;
    }
    if (!pJson.isString()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    break;
  case 3:
    if (pJson.isNull()) {
      return true;
    }
    if (!pJson.isString()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    break;
  default:
    err = "Internal error in the server";
    return false;
  }
  return true;
}
